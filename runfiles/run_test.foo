! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_molecule.foo 3361 2009-09-24 15:40:02Z dylan_ $

program run_TEST

    implicit none

    command_line :: COMMAND_LINE
    option, value, infile, outfile, basis_dir :: STR
    i :: INT
    m :: MOLECULE*

    ! Macro to create Tonto system object
    ! Initialise MPI parallel stuff too.
    TONTO_CREATE

    ! IO files for error messages
    stderr.create_stderr
    stderr.open_for("write")

    stdout.create_stdout

    ! Get command line
    command_line.process_options
    DIE_IF(command_line.has_arguments,"illegal arguments; use dashed options only")

    ! Default option values
    infile    = " "
    outfile   = " "
    basis_dir = "../basis_sets"

    ! Analyze command line options
    do i = 1,command_line.n_options

        ! Get options
        option = command_line.option(i)
        value  = command_line.option_value(i)

        ! Analyze options
        select case (option)

            case("in");  infile  = value

            case("out"); outfile = value

            case("b"); basis_dir = value

            case("help")
                stdout.flush
                stdout.text("Usage:")
                stdout.flush
                stdout.text("  run_test -in <input-file> -out <output-file> -b <basis-dir>")
                stdout.flush
                stdout.text("Notes:")
                stdout.flush
                stdout.text(". The default <input-file>  is 'stdin'")
                stdout.text(". The default <output-file> is 'stdout'")
                stdout.text(". The default <basis-dir>   is '../basis_sets'")

            case default
                DIE("unknown option: "//trim(option))

        end

    end

    ! Clean
    command_line.destroy_ptr_part

    ! Initialise standard I/O files.
    stdout.destroy
    if (outfile/=" ") then; stdout.create(outfile)
    else;                   stdout.create("stdout")
    end
    stdout.open_for("write")

    if (infile/=" ") then; stdin.create(infile)
    else;                  stdin.create("stdin")
    end
    stdin.open_for("read")

    ! Start timer
    std_time.start_timing

    ! Run the molecule
    ! Create (leaky)
    m.BASE:create

    ! Gaussian indices (leaky)
    GAUSSIAN_DATA:set_indices(GAUSSIAN_DATA_L_MAX)

    ! Banner
    MOLECULE.MAIN:put_banner

    ! Read & process keywords
    m.BASE:set_basis_directory(basis_dir)
    m.MAIN:read_keywords

    ! Timing
    stdout.flush
    stdout.text(std_time.elapsed_time_message("job "//'"'// trim(m.name) //'"'))
    stdout.text(std_time.elapsed_cpu_time_message("job "//'"'// trim(m.name) //'"'))

    ! Warnings
    if (tonto.warnings_issued) then
        stdout.flush
        stdout.text("WARNINGS were issued in this job.")
        stdout.text("Look above, or in the stderr file.")
    end

    ! Clean-up molecule
    m.MAIN:cleanup

    ! Clean-up files
    TEXTFILE:destroy(stdout)
    TEXTFILE:destroy(stdin)
    TEXTFILE:destroy(stderr)

    ! Clean-up tonto system
    TONTO_DESTROY

end
