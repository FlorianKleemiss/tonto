! Copyright (C) Dylan Jayatilaka, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: run_molecule.foo 3361 2009-09-24 15:40:02Z dylan_ $

program run_MOLECULE

   implicit none

   command_line :: COMMAND_LINE
   option,value, infile,outfile :: STR
   i :: INT
   m :: MOLECULE*

   ! Macro to create Tonto system object
   ! Initialise MPI parallel stuff too.
   TONTO_CREATE

   ! IO files for error messages
   stderr.create_stderr
   stderr.open_for("write")

   stdout.create_stdout

   ! Get command line
   command_line.process_options
   DIE_IF(command_line.has_arguments,"illegal arguments; use -options only e.g. -help")

   ! Default option values
   infile  = " "
   outfile = " "

   ! Analyze command line options
   do i = 1,command_line.n_options

      ! Get options
      option = command_line.option(i)
      value  = command_line.option_value(i)

      ! Analyze options
      select case (option)

         case("in");  infile  = value

         case("out"); outfile = value

         case("help")
            stdout.flush
            stdout.text("Usage:")
            stdout.flush
            stdout.text("  tonto -in <input-file> -out <output-file>")
            stdout.flush
            stdout.text("Notes:")
            stdout.flush
            stdout.text(". The default <input-file>  is 'stdin'")
            stdout.text(". The default <output-file> is 'stdout'")

         case default
            DIE("unknown option: "//trim(option))

      end

   end

   ! Clean
   command_line.destroy_ptr_part

   ! Initialise standard I/O files.
   if (outfile/=" ") then
      stdout.destroy
      stdout.create(outfile)
      tonto.set_stdout_file(stdout)
   end
   stdout.open_for("write")

   if (infile/=" ") then
      stdin.create(infile)
   else
      stdin.create_stdin
   end
   stdin.open_for("read")

   ! Run the molecule
   m.MAIN:run

   ! Clean-up molecule
   m.MAIN:cleanup

   ! Clean-up files
   TEXTFILE:destroy(stdout)
   TEXTFILE:destroy(stdin)
   TEXTFILE:destroy(stderr)

   ! Clean-up tonto system
   TONTO_DESTROY


end
