!---------------------------------------------------------------------------
!
! MAT3{INTRINSIC}:
!
! This is a virtual module, for 3 dimensional matrices of INTRINSIC type.
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

virtual module MAT3{INTRINSIC}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim1,dim2,dim3) ::: leaky, PURE
   ! Allocate "self" with the given dimensions
      self :: allocatable, OUT
      dim1,dim2,dim3 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(dim1,dim2,dim3),stat=status)
      ENSURE(status==0,"error in allocating memory")
#else
      allocate(self(dim1,dim2,dim3))
#endif

   end

   create(lb1,ub1,lb2,ub2,lb3,ub3) ::: leaky, PURE
   ! Allocate "self" with the given bounds
      self :: allocatable, OUT
      lb1,lb2,lb3,ub1,ub2,ub3 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3),stat=status)
      ENSURE(status==0,"error in deallocating memory")
#else
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3))
#endif

   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

!  ============================
!  Size-of and shape operations
!  ============================

   size result (res) ::: inlined_by_foo
   ! Return the size of the array
      res :: INT
      res = size(self)
   end

   dim1 result (res) ::: inlined_by_foo
   ! Return the size of the 1st dimension
      res :: INT
      res = size(self,1)
   end

   dim2 result (res) ::: inlined_by_foo
   ! Return the size of the 2nd dimension
      res :: INT
      res = size(self,2)
   end

   dim3 result (res) ::: inlined_by_foo
   ! Return the size of the 2nd dimension
      res :: INT
      res = size(self,3)
   end

   is_same_shape_as(b) result (res) ::: pure
   ! Returns TRUE if the matrix "b" has the same shape as self
      self :: IN
      b :: MAT3{OBJECT}, IN
      res :: BIN

      res = .dim1==b.dim1 AND .dim2==b.dim2 AND .dim3==b.dim3

   end

   is_cube result (res) ::: pure
   ! Returns TRUE if self is a cube
      self :: IN
      res :: BIN

      res = .dim1==.dim2 AND .dim1==.dim3

   end

   is_square_23 result (res) ::: pure
   ! Checks to see that the matrix formed by the 2nd and 3rd columns is square.
      self :: IN
      res :: BIN

      res = .dim2==.dim3

   end

   tri_size_23 result (ltr) ::: PURE
   ! Returns the size of the lower triangle needed to store the matrix self.
   ! Assumes the matrix formed by columns 2 and 3 is the symmetric one.
      self :: IN
      ltr :: INT

   ENSURE(.is_square_23,"2nd and 3rd dimensions not equal")

      ltr = .dim1*.dim2*(.dim2+1)/2

   end

!  ===========
!  Set methods
!  ===========

   set_to(b) ::: pure
   ! Set "self" to vector "b" in standard order
      self :: INOUT
      b :: VEC{OBJECT}, IN

      self = reshape(b,[.dim1,.dim2,.dim3])

   end

   set_to_reverse_of(b) ::: PURE
   ! Set "self" to the reverse of vector "b" i.e. the standard order is
   ! reversed.
      self :: INOUT
      b :: MAT3{OBJECT}

   ENSURE(.dim1==b.dim3,"incompatible sizes")
   ENSURE(.dim2==b.dim2,"incompatible sizes")
   ENSURE(.dim3==b.dim1,"incompatible sizes")

      i,j,k :: INT

      do k = 1,.dim3
      do j = 1,.dim2
      do i = 1,.dim1
         self(i,j,k) = b(k,j,i)
      end
      end
      end

   end

end
