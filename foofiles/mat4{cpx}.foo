!---------------------------------------------------------------------------
!
!  MAT4{CPX}: Complex 4 dimensional matrices
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: mat4{cpx}.foo 4349 2014-05-06 02:01:54Z dylan_ $
!---------------------------------------------------------------------------

module MAT4{CPX}

   implicit none

contains

!  ==========
!  Allocation
!  ==========

   create(dim1,dim2,dim3,dim4) ::: leaky, PURE
   ! Allocate "self" with the given dimensions
      self :: allocatable, OUT
      dim1,dim2,dim3,dim4 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(dim1,dim2,dim3,dim4),stat=status)
      ENSURE(status==0,"error in allocating memory")
#else
      allocate(self(dim1,dim2,dim3,dim4))
#endif

   end

   create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4) ::: leaky, PURE
   ! Allocate "self" with the given bounds
      self :: allocatable, OUT
      lb1,lb2,lb3,ub1,ub2,ub3,lb4,ub4 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4),stat=status)
      ENSURE(status==0,"error in deallocating memory")
#else
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4))
#endif

   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

!  ============================
!  Size-of and shape operations
!  ============================

   size result (res) ::: inlined_by_foo
   ! Return the size of the array
      res :: INT
      res = size(self)
   end

   dim1 result (res) ::: inlined_by_foo
   ! Return the size of the 1st dimension
      res :: INT
      res = size(self,1)
   end

   dim2 result (res) ::: inlined_by_foo
   ! Return the size of the 2nd dimension
      res :: INT
      res = size(self,2)
   end

   dim3 result (res) ::: inlined_by_foo
   ! Return the size of the 2nd dimension
      res :: INT
      res = size(self,3)
   end

   dim4 result (res) ::: inlined_by_foo, pure
   ! Return the size of the 4th dimension
      res :: INT
      res = size(self,4)
   end

   is_same_shape_as(b) result (res) ::: get_from(MAT4{INTRINSIC}), pure
   ! Returns TRUE if the matrix "b" has the same shape as self
   end

   is_hypercube result (res) ::: get_from(MAT4{INTRINSIC}), pure
   ! Returns TRUE if self is a hypercube
   end

!  ===========
!  Set methods
!  ===========

   set_to(b) ::: get_from(MAT4{INTRINSIC}), PURE
   ! Set "self" to vector "b" in standard order
   end

!  =============
!  String widths
!  =============
   
   str_lengths(dp,spaces) result (res) ::: get_from(MAT4{INTRINSIC}), pure
   ! Returns the minimal string lengths, with optional extra "spaces"
      self :: IN
      dp :: INT, IN
      spaces :: INT, IN, optional
      res :: MAT4{INT}(.dim1,.dim2,.dim3,.dim4)
   end 

   get_max_str_length(msl,max_dp,spaces) ::: get_from(MAT4{INTRINSIC}), pure
   ! Returns the maximum of the string lengths.
   end

end
