!---------------------------------------------------------------------------
!
! VEC{BASIS}: BASIS vectors
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: vec{basis}.foo 4263 2014-01-22 06:32:26Z durhammike $
!---------------------------------------------------------------------------

module VEC{BASIS}

   implicit none

   library_directory :: STR, private = VEC_BASIS_LIBRARY_DIRECTORY

contains

!  ==================
!  Allocation methods
!  ==================

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{OBJECT}), inlined_by_foo, pure
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{OBJECT}), inlined_by_foo, pure
   ! Return the size of the 1st dimension
   end

!  =======================
!  Shrinking and expansion 
!  =======================

   shrink(dim) ::: get_from(VEC{OBJECT}, leaky, PURE
   ! Shrink "self" to dimension "dim" from the end. Contents are
   ! retained.
   end

   expand(dim) ::: get_from(VEC{OBJECT}, leaky, PURE
   ! Expand "self" to dimension "dim" from the end. New slots are
   ! undefined. 
   end

   append(v) ::: get_from(VEC{OBJECT}, leaky, PURE
   ! Append the contents of vector "v" to "self".
   end

   append(value) ::: get_from(VEC{OBJECT}, leaky, PURE
   ! Appends the single scalar "value" onto the end of "self".
   end

!  =============================
!  Repetition related operations
!  =============================

   remove_repetitions ::: get_from(VEC{OBJECT}), leaky
   ! Remove repeated elements in "self". The list may shrink.
   end

   has_repetitions result (res) ::: get_from(VEC{OBJECT})
   ! Return TRUE if self has at least one repeated element.
   end

   no_of_unique_elements result (res) ::: get_from(VEC{OBJECT}), pure
   ! Return the number of unique elements in the vector.
   end

!  ============
!  Set routines
!  ============

   set_spherical(val) ::: pure
   ! Set sphericals to "val" 
      self :: INOUT
      val :: BIN, IN

      i :: INT

      do i = 1,.dim
         self(i).set_spherical(val)
      end

   end

   set_library_dir_name(directory) ::: public
   ! Set the directory name for where the basis set libraries are stored.
      self :: allocatable, IN
      directory :: STR, IN

      ! Remove warning
      if (.created) then 
      end

      library_directory = directory

   end

   library_file_name(basis_kind) result (res) ::: pure
   ! Return the basis set library file name for a particular "basis_kind".
      self :: IN
      basis_kind :: STR, IN
      res :: STR

      res = trim(library_directory)//"/"//trim(basis_kind)

   end

!  ===============
!  Inquiry methods
!  ===============

   no_of_shells result (res) ::: pure
   ! Return the number of shells in this basis set
      self :: IN
      res :: INT

      k :: INT

      res = 0
      do k =1,.dim
         res = res + self(k).dim
      end

   end

!  =============
!  Normalisation
!  =============

   unnormalise ::: pure
   ! Take the normalisation factors out of the primitives, assuming
   ! that the contraction coeff's refer to normalised basis functions
      self :: INOUT

      i :: INT

      do i= 1,.dim
         self(i).unnormalise
      end

   end

   renormalise ::: pure
   ! Put back in the normalisation factors of the primitives, assuming
   ! that the contraction coeff's refer to unnormalised basis functions
      self :: INOUT

      i :: INT

      do i= 1,.dim
         self(i).renormalise
      end

   end

!  ====================
!  Non-list based input
!  ====================

   read_keywords ::: get_from(VEC{OBJECT}), leaky
   ! Read and process normal (non list-type) keywords from "stdin";
   ! "self" allocatable here.
   end

   process_keyword(keyword) ::: leaky
   ! Process a normal (non list-type) "keyword".
      self :: allocatable, INOUT
      keyword :: STR, IN

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)
      case("}                 ")     ! do nothing.
      case("put               "); .put
      case("redirect          "); TEXTFILE:redirect_stdin
      case("revert            "); TEXTFILE:revert
      case default; UNKNOWN(word)
      end

   end

!  ================
!  List-based input
!  ================

   read_list_keywords ::: get_from(VEC{OBJECT}), recursive, leaky
   ! Read and process list-data keywords from "stdin". List-based
   ! keywords are those that apply to each individual element of the
   ! list through a list of "keys" stored in the host module.
   ! NOTE: this routine will create the list, if required.
   ! NOTE: "self" allocatable here.
   end

   process_list_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! Process a list-data "keyword", common to all list-type objects.
   ! "self" is allocatable here.
   end

   process_keys ::: get_from(VEC{OBJECT}), leaky
   ! Process the keywords in the "keys" OBJECT module variable on each
   ! element in the list "self".  "self" is allocatable here.
   end

   read_data ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process the keywords in the "keys" module variable
   ! on each element of the lista-data "self". Opening and closing
   ! braces are needed.
   end

   read_data_sans_braces ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process the items in the "keys" OBJECT module variable
   ! to read in the list-data.  Opening and closing braces *not*
   ! needed.  "self" is allocatable here.
   end

   data_length result (length) ::: get_from(VEC{OBJECT}), selfless, private
   ! Read ahead in "stdin" to get the "length" of the list-data.  The
   ! data must begin with the first data item, *not* a "{" symbol but
   ! must be terminated by a "}" symbol.  The order of data items
   ! comprising the list-data is given by the "keys" OBJECT module
   ! variable.  The data list must be terminated by a "}".
   end

!  ======
!  Output
!  ======

   dump(object_name) ::: get_from(VEC{OBJECT})
   ! Dump a vector object
   end

   dmpa(object_name) ::: get_from(VEC{OBJECT})
   ! Dump an allocatable vector object
   end

   put ::: get_from(VEC{OBJECT})
   ! Output the list information
   end

end

