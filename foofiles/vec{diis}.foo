!---------------------------------------------------------------------------
!
! VEC{DIIS}: DIID vectors
!
! Copyright (C) Dylan Jayatilaka, 2014
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
! 
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
! 
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: $
!---------------------------------------------------------------------------

module VEC{DIIS}

   implicit none

contains

!  ==================
!  Allocation methods
!  ==================

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end


!  ============
!  Copy methods
!  ============

   create_copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Create a replica copy of "vec".
   end

   copy(vec) ::: get_from(VEC{OBJECT}), leaky
   ! Copy "vec".
   end

   copy(object) ::: get_from(VEC{OBJECT}) 
   ! Copy "object" multiple times.
   end

!  ===========
!  Set methods
!  ===========

   set_defaults ::: get_from(VEC{OBJECT})
   ! Set default values
   end

   set_defaults(diis)
   ! Set default values from a "diis" object
   ! NOTE: pointer parts are assigned, so nullify
   ! pointer parts of "diis" when destroying "self"
      self :: INOUT
      diis :: DIIS, IN

      self(:) = diis

   end

   set_use_errors(val)
   ! Set whether to use error vectors
      self :: INOUT
      val :: BIN, IN

      self(:).use_errors = val

   end

end
