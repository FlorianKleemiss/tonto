!---------------------------------------------------------------------------
!
! MAT5{INTRINSIC}: 
!
! This is a virtual module, for 5 dimensional matrices of INTRINSIC type.
!
! Copyright (C) Dylan Jayatilaka, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: mat5{intrinsic}.foo 4008 2013-05-23 13:00:11Z dylan_ $
!---------------------------------------------------------------------------

virtual module MAT5{INTRINSIC}

   implicit none

contains

   create(dim1,dim2,dim3,dim4,dim5) ::: leaky, PURE
   ! Create the object with the desired bounds
      self :: allocatable, OUT
      dim1,dim2,dim3,dim4,dim5 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(dim1,dim2,dim3,dim4,dim5),stat=status)
      ENSURE(status==0,"error in deallocating memory")
#else
      allocate(self(dim1,dim2,dim3,dim4,dim5))
#endif

   end

   create(bounds) ::: leaky, PURE
   ! Create a 5-d array with all upper "bounds" specified
      self :: allocatable, OUT
      bounds :: VEC{INT}(5), IN

      .create(bounds(1),bounds(2),bounds(3),bounds(4),bounds(5))

   end

   create(lb1,ub1,lb2,ub2,lb3,ub3,lb4,ub4,lb5,ub5) ::: leaky, PURE
   ! Create the object with the desired bounds
      self :: allocatable, OUT
      lb1,lb2,lb3,ub1,ub2,ub3,lb4,ub4,lb5,ub5 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4,lb5:ub5),stat=status)
      ENSURE(status==0,"error in deallocating memory")
#else
      allocate(self(lb1:ub1,lb2:ub2,lb3:ub3,lb4:ub4,lb5:ub5))
#endif

   end

   create(bounds1,bounds2,bounds3,bounds4,bounds5) ::: leaky, PURE
   ! Create the object with the desired bounds
      self :: allocatable, OUT
      bounds1,bounds2,bounds3,bounds4,bounds5 :: VEC{INT}(2), IN

      .create(bounds1(1),bounds1(2), &
              bounds2(1),bounds2(2), &
              bounds3(1),bounds3(2), &
              bounds4(1),bounds4(2), &
              bounds5(1),bounds5(2))

   end

   create(bounds) ::: leaky, PURE
   ! Create the object with the desired bounds
      self :: allocatable, OUT
      bounds :: MAT{INT}(5,2), IN

      .create(bounds(1,1),bounds(1,2), &
              bounds(2,1),bounds(2,2), &
              bounds(3,1),bounds(3,2), &
              bounds(4,1),bounds(4,2), &
              bounds(5,1),bounds(5,2))

   end

   destroy ::: leaky, PURE
   ! Destroy the object
      self :: allocatable, INOUT

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      deallocate(self,stat=status)
      ENSURE(status==0,"error in deallocating memory")
#else
      deallocate(self)
#endif

   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been created
   end

   size result (res) ::: inlined_by_foo, pure
   ! Return the size of the array
      self :: IN
      res :: INT

      res = size(self)

   end

   dim1 result (res) ::: inlined_by_foo, pure
   ! Return the size of the 1st dimension
      self :: IN
      res :: INT

      res = size(self,1)

   end

   dim2 result (res) ::: inlined_by_foo, pure
   ! Return the size of the 2nd dimension
      self :: IN
      res :: INT

      res = size(self,2)

   end

   dim3 result (res) ::: inlined_by_foo, pure
   ! Return the size of the 3rd dimension
      self :: IN
      res :: INT

      res = size(self,3)

   end

   dim4 result (res) ::: inlined_by_foo, pure
   ! Return the size of the 4th dimension
      self :: IN
      res :: INT

      res = size(self,4)

   end

   dim5 result (res) ::: inlined_by_foo, pure
   ! Return the size of the 5th dimension
      self :: IN
      res :: INT

      res = size(self,5)

   end

   is_same_shape_as(b) result (res)  ::: pure
   ! Returns TRUE if the matrix "b" has the same shape as self
      self :: IN
      b :: MAT5{INTRINSIC}, IN
      res :: BIN

      res = .dim1==b.dim1 &
        AND .dim2==b.dim2 &
        AND .dim3==b.dim3 &
        AND .dim4==b.dim4 &
        AND .dim5==b.dim5

   end

end
