!---------------------------------------------------------------------------
!
! VEC{COPPENS_ORBITAL}: COPPENS_ORBITAL vectors
!
! Copyright (C) Dylan Jayatilaka, 2002
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module VEC{COPPENS_ORBITAL}

   implicit none

   saved_self :: VEC{COPPENS_ORBITAL}*, private  DEFAULT_NULL

contains

!  ==================
!  Allocation methods
!  ==================

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{OBJECT}), inlined_by_foo, pure
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{OBJECT}), inlined_by_foo, pure
   ! Return the size of the 1st dimension
   end

!  =======================
!  Shrinking and expansion 
!  =======================

   shrink(dim) ::: get_from(VEC{OBJECT}, leaky, PURE
   ! Shrink "self" to dimension "dim" from the end. Contents are
   ! retained.
   end

   expand(dim) ::: get_from(VEC{OBJECT}, leaky, PURE
   ! Expand "self" to dimension "dim" from the end. New slots are
   ! undefined. 
   end

   append(v) ::: get_from(VEC{OBJECT}, leaky, PURE
   ! Append the contents of vector "v" to "self".
   end

   append(value) ::: get_from(VEC{OBJECT}, leaky, PURE
   ! Appends the single scalar "value" onto the end of "self".
   end

!  ===========
!  Set methods
!  ===========

   set_saved_self ::: get_from(OBJECT)
   ! Set saved_self
   end

!  ===============
!  Inquiry methods
!  ===============

   n_orbitals result (res) ::: pure
   ! Return the number of orbitals
      self :: IN
      res :: INT

      res = .dim

   end

   maximum_orbital_n_value result (res) ::: pure
   ! Returns the maximum orbital n value
      self :: IN
      res :: INT

      i :: INT

      res = 0
      do i = 1,.dim
         res = max(maxval(self(i).n),res)
      end

   end

   same_as(vec) result(same) ::: pure
   ! Return TRUE if the orbital vector "self" is the same as "vec".
      self :: IN
      vec :: VEC{COPPENS_ORBITAL}, IN
      same :: BIN

      i :: INT
      if (.dim/=vec.dim) then

         same = FALSE

      else

         same = TRUE
         do i = 1,.dim
            same = same AND self(i).same_as(vec(i))
            if (NOT same) exit
         end

      end

   end

!  ==============================
!  Density and derivative density
!  ==============================

   density_at_radius(R) result (res) ::: PURE
   ! Return the total coppens density values at the radial value "R".
      R :: REAL, IN
      res :: REAL
      n :: INT
      res = ZERO ! Work out radial density here
      do n = 1,.dim
        res = res + self(n).density_at_radius(R)
      end
   end

   densities_at_radii(R) result (res) ::: PURE
   ! Make the total coppens density values at the radial values "R".
      self :: IN
      R :: VEC{REAL}, IN
      res :: VEC{REAL}(R.dim)

      n :: INT

      ! Work out radial density here
      res = ZERO 
      do n = 1,.dim
         res = res + self(n).densities_at_radii(R)
      end

   end


   density_value_at_radius(R) result (res) ::: selfless, public, PURE
   ! Return the total coppens density values at the radial value "R".
      R :: REAL, IN
      res :: REAL
      n :: INT

      ! Work out radial density here
      res = ZERO 
      do n = 1,saved_self.dim
         res = res + saved_self(n).density_at_radius(R)
      end

   end

   density_at_sqrt_radius2(R2) result (res) ::: selfless, public, PURE
   ! Return the total coppens density values at the square root of
   ! radial value "R2".
      R2 :: REAL, IN
      res :: REAL
      R :: REAL
      n :: INT

      R = sqrt(R2)

      ! Work out radial density here
      res = ZERO 
      do n = 1,saved_self.dim
        res = res + saved_self(n).density_at_radius(R)
      end

   end


   radial_density_value_at_radius(R) result (res) ::: selfless, public, PURE
   ! Return the total *radial* coppens density values at the radial value "R".
     R :: REAL, IN
     res :: REAL
     n :: INT

     ! Work out radial density here
     res = ZERO 
     do n = 1,saved_self.dim
        res = res + saved_self(n).radial_density_at_radius(R)
     end

   end

!  =============
!  Normalisation
!  =============

   unnormalise ::: get_from(VEC{BASIS}), pure
   ! Take the normalisation factors out of the primitives, assuming
   ! that the contraction coeff's refer to normalised basis functions
   end

   renormalise ::: get_from(VEC{BASIS}), pure
   ! Put back in the normalisation factors of the primitives, assuming
   ! that the contraction coeff's refer to unnormalised basis functions
   end

!  ====================
!  Non-list based input
!  ====================

   read_keywords ::: get_from(VEC{OBJECT}), leaky
   ! Read and process normal (non list-type) keywords from "stdin";
   ! "self" allocatable here.
   end

   process_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! Process a normal (non list-type) "keyword".
   end

!  ================
!  List-based input
!  ================

   read_list_keywords ::: get_from(VEC{OBJECT}), recursive, leaky
   ! Read and process list-data keywords from "stdin". List-based
   ! keywords are those that apply to each individual element of the
   ! list through a list of "keys" stored in the host module.
   ! NOTE: this routine will create the list, if required.
   ! NOTE: "self" allocatable here.
   end

   process_list_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! Process a list-data "keyword", common to all list-type objects.
   ! "self" is allocatable here.
   end

   process_keys ::: get_from(VEC{OBJECT}), leaky
   ! Process the keywords in the "keys" OBJECT module variable on each
   ! element in the list "self".  "self" is allocatable here.
   end

   set_keys(the_keys) ::: get_from(VEC{OBJECT}), leaky
   ! This is for setting the "keys" externally.
   end

   read_data ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process the keywords in the "keys" module variable
   ! on each element of the lista-data "self". Opening and closing
   ! braces are needed.
   end

   read_data_sans_braces ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process the items in the "keys" OBJECT module variable
   ! to read in the list-data.  Opening and closing braces *not*
   ! needed.  "self" is allocatable here.
   end

   data_length result (length) ::: get_from(VEC{OBJECT}), selfless, private
   ! Read ahead in "stdin" to get the "length" of the list-data.  The
   ! data must begin with the first data item, *not* a "{" symbol but
   ! must be terminated by a "}" symbol.  The order of data items
   ! comprising the list-data is given by the "keys" OBJECT module
   ! variable.  The data list must be terminated by a "}".
   end

   data_length_BL_terminated result (length) ::: get_from(VEC{OBJECT}), selfless, private
   ! defined in the associated list-element type module.
   ! Read ahead in "stdin" to get the "length" of the list-data. The
   ! data must begin with the first data item, *not* a "{" symbol but
   ! must be terminated by a blank line (BL). The order of data items
   ! comprising the list-data is given by the "keys" OBJECT module
   ! variable.
   end

!  ======
!  Output
!  ======

   dump(object_name) ::: get_from(VEC{OBJECT})
   ! Dump a vector object
   end

   dmpa(object_name) ::: get_from(VEC{OBJECT})
   ! Dump an allocatable vector object
   end

   put ::: get_from(VEC{OBJECT})
   ! Output the list information
   end

end
