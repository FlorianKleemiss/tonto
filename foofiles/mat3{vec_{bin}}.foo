!---------------------------------------------------------------------------
!
! MAT3{VEC_{BIN}} : 
!
! A 3-D matrix where each element is a vector of (possibly) a different length
!
! Copyright (C) Mike Turner, Dylan Jayatilaka, 2009
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module MAT3{VEC_{BIN}}

   implicit none

contains

!  =================
!  Memory allocation
!  =================

   create(dim1,dim2,dim3) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate object with desired dimensions, and with the ".element"
   ! part unallocated
   end

   create(dim1,dim2,dim3,dimv) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate object with desired dimensions, and with the ".element"
   ! part having dimension "dimv".
   end

   create(dim1,dim2,dim3,bounds) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky
   ! Allocate object with desired dimensions, and with ".element" part
   ! allocated with "bounds"
   end

   create_vec(dimv) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate only the the ".element" part with size "dimv".
   end

   create_vec(bounds) ::: get_from(MAT3{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate only the the ".element" parts with "bounds".
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

   zero ::: get_from(MAT3{VEC_{INTRINSIC}}), pure
   ! Zero all elements
   end

!  ======
!  Sizing
!  ======

   is_same_shape_as(b) result (res) ::: get_from(MAT3{VEC_{INTRINSIC}}), pure
   ! Returns TRUE if the matrix "b" has the same shape as "self"
   end

end
