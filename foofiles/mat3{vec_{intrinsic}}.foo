!---------------------------------------------------------------------------
!
! MAT3{VEC_{INTRINSIC}} : 
!
! A 3-D matrix where each element is a vector of (possibly) a different length
!
! Copyright (C) Dylan Jayatilaka, 2002
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id:$
!---------------------------------------------------------------------------

virtual module MAT3{VEC_{INTRINSIC}}

   implicit none

contains

!  =================
!  Memory allocation
!  =================

   create(dim1,dim2,dim3) ::: leaky, PURE
   ! Allocate object with desired dimensions, and with the ".element"
   ! part unallocated
      self :: allocatable, OUT
      dim1,dim2,dim3 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(dim1,dim2,dim3),stat=status)
      ENSURE(status==0,"error in deallocating memory")
#else
      allocate(self(dim1,dim2,dim3))
#endif

   end

   create(dim1,dim2,dim3,dimv) ::: leaky, PURE
   ! Allocate object with desired dimensions, and with the ".element"
   ! part having dimension "dimv".
      self :: allocatable, OUT
      dim1,dim2,dim3,dimv :: INT, IN

      .create(dim1,dim2,dim3)
      .create_vec(dimv)

   end

   create(dim1,dim2,dim3,bounds) ::: leaky
   ! Allocate object with desired dimensions, and with ".element" part
   ! allocated with "bounds"
      self :: allocatable, OUT
      dim1,dim2,dim3 :: INT, IN
      bounds :: VEC{INT}(2), IN

      .create(dim1,dim2,dim3)
      .create_vec(bounds)

   end

   create_vec(dimv) ::: leaky, PURE
   ! Allocate only the the ".element" part with size "dimv".
      self :: INOUT
      dimv :: INT, IN

      i,j,k :: INT

      do i = 1,.dim1
      do j = 1,.dim2
      do k = 1,.dim3
         self(i,j,k).element.create(dimv)
      end
      end
      end

   end

   create_vec(bounds) ::: leaky, PURE
   ! Allocate only the the ".element" parts with "bounds".
      self :: INOUT
      bounds :: VEC{INT}(2), IN

      i,j,k :: INT

      do i = 1,.dim1
      do j = 1,.dim2
      do k = 1,.dim3
         self(i,j,k).element.create(bounds)
      end
      end
      end

   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

   zero ::: pure
   ! Zero all elements
      self :: INOUT

      i,j,k :: INT

      do i = 1,.dim1
      do j = 1,.dim2
      do k = 1,.dim3
         self(i,j,k).element = 0
      end
      end
      end

   end

!  ======
!  Sizing
!  ======

   is_same_shape_as(b) result (res) :::  pure
   ! Returns TRUE if the matrix "b" has the same shape as "self"
      self :: IN
      b :: MAT3{VEC_{INTRINSIC}}, IN
      res :: BIN

      res = .dim1==b.dim1 AND .dim2==b.dim2 AND .dim3==b.dim3

   end

end
