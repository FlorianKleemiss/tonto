!---------------------------------------------------------------------------
!
! VEC{BIN} : Boolean vector operations ...
!
! Copyright (C) Daniel Grimwood, 1999
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module VEC{BIN}

  implicit none

contains

! =================
! Memory allocation
! =================

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   create(lb,ub) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate the vector with lower bound "lb", upper bound "ub"
   end

   create(bounds) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate the vector with lower and upper bounds in "bounds"
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

! ==================
! Size-of operations
! ==================

   size result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo, PURE
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{INTRINSIC}), inlined_by_foo, PURE
   ! Return the size of the 1st dimension
   end

   lb result (res) ::: get_from(VEC{OBJECT}), pure
   ! Return the lower bound of self
   end

   ub result (res) ::: get_from(VEC{OBJECT}), pure
   ! Return the upper bound of self
   end

! =======================
! Shrinking and expansion
! =======================

   shrink(dim,chop_start) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Shrink "self" to dimension "dim" from the end. Contents are
   ! retained. If "chop_start" is present and TRUE, "self" is chopped
   ! from the start, and the contents from the end are retained.
   end

   expand(dim,init,grow_start) ::: get_from(VEC{INTRINSIC}, INIT?=>FALSE), leaky, PURE
   ! Expand "self" to dimension "dim" from the end. New slots are
   ! zeroed unless scalar "init" is set. If "grow_start" is present
   ! and TRUE, then "self" is expanded from the start, keeping the
   ! same lower bound.
   end

   append(v) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Append the contents of vector "v" to "self".
   end

   append(v1,v2) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Appends the contents of vectors "v1" and "v2" to "self".
   end

   append(value) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Appends the single scalar "value" onto the end of "self".
   end

   prepend(v) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Prepend vector "v" to "self".
   end

   prepend(value) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Prepend a single "value" to "self".
   end

   prune_element(k) ::: get_from(VEC{INTRINSIC}), leaky, PURE
   ! Removes the single element at position "k" from "self".
   ! Elements after that position are moved downward.
   end

! ====================
! Comparison functions
! ====================

   equals(v) result (res) ::: pure
   ! Return true if "self" is the same as "v".
      self :: IN
      v :: VEC{BIN}, IN
      res :: BIN
      res = .same_as(v)
   end

   same_as(v) result (res) ::: pure
   ! Return true if "self" is the same as "v".
      self :: IN
      v :: VEC{BIN}, IN
      res :: BIN
      if (.dim/=v.dim) then; res = FALSE
      else;                  res = all(self EQV v)
      end
   end

! ================
! Sorting routines
! ================

   reverse_order ::: get_from(VEC{INTRINSIC}), pure
   ! Reverse the order of the elements of self
   end

   swap_elements(e1,e2) ::: get_from(VEC{INTRINSIC}), pure
   ! Swap elements "e1" and "e2" in "self".
   end

! ==========
! Misc stuff
! ==========

   set_to(v) ::: get_from(VEC{INTRINSIC}, V?=>BIN), pure
   ! Set the vector to "v". See also the "copy" routine.
   end

   n_true result (res) ::: pure
   ! Returns the number of true items in self.
      self :: IN
      res :: INT

      res = count(self)

   end

   n_false result (res) ::: pure
   ! Returns the number of false items in self.
      self :: IN
      res :: INT

      res = size(self) - count(self)

   end

   index_of_first_true_element result (res) ::: pure
   ! Returns the index of the first true element in self, or zero if
   ! there is no true element.
      self :: IN
      res :: INT

      i :: INT

      res = 0

      do i = 1,size(self)
         if (NOT self(i)) cycle
         res = i
         exit
      end

   end

! =============
! String widths
! =============
   
   str_lengths result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns the minimal string lengths.
   end 

   get_max_str_length(msl,spaces) ::: get_from(VEC{INTRINSIC}), pure
   ! Returns "msl", the maximum of the string lengths for "self",
   ! and with optional extra "spaces". 
   end

! =====================
! Conversion to strings
! =====================

   to_str result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a string of minimal length
   end 

   to_str(fmt,left_justify) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a "string" using the specified fortran "fmt".
   end

   to_str(width,left_justify) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a string with specified "width".
   end

   to_concatenated_str(fmt,separator) result (res) ::: get_from(VEC{INTRINSIC}), pure
   ! Change self to a string using "fmt" if specified, and with
   ! "separator" between each item, if specified.
   end

end
