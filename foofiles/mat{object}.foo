!---------------------------------------------------------------------------
!
! MAT{OBJECT}: generic matrix operations ...
!
! Copyright (C) Dylan Jayatilaka, 1997
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: mat{object}.foo 4008 2013-05-23 13:00:11Z dylan_ $
!---------------------------------------------------------------------------

virtual module MAT{OBJECT}

   implicit none

contains

!  =================
!  Memory allocation
!  =================

   create(dim1,dim2) ::: leaky, PURE
   ! Allocate a matrix with the given dimensions
      self :: allocatable, OUT
      dim1,dim2 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(dim1,dim2),stat=status)
      ENSURE(status==0,"error in allocating memory")
#else
      allocate(self(dim1,dim2))
#endif

   end

   create(lb1,ub1,lb2,ub2) ::: leaky, PURE
   ! Allocate a matrix with the given bounds
      self :: allocatable, OUT
      lb1,ub1,lb2,ub2 :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(lb1:ub1,lb2:ub2),stat=status)
      ENSURE(status==0,"error in allocating memory")
#else
      allocate(self(lb1:ub1,lb2:ub2))
#endif

   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been created
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been created
   end

!  ============================
!  Size-of and shape operations 
!  ============================

   size result (res) ::: inlined_by_foo
   ! Return the size of the array
      res :: INT
      res = size(self)
   end

   dim1 result (res) ::: inlined_by_foo
   ! Return the size of the 1st dimension
      res :: INT
      res = .dim1
   end

   dim2 result (res) ::: inlined_by_foo
   ! Return the size of the 2nd dimension
      res :: INT
      res = .dim2
   end

   is_same_shape_as(a) result (res) ::: pure
   ! Returns TRUE if the matrix "a" has the same shape as "self"
      self :: IN
      a :: MAT{OBJECT}, IN
      res :: BIN
      res = .dim1==a.dim1 AND .dim2==a.dim2
   end

   is_transposed_shape_of(a) result (res) ::: pure
   ! Returns TRUE if the matrix "a" is the transposed shape of self
      self :: IN
      a :: MAT{OBJECT}, IN
      res :: BIN
      res = .dim1==a.dim2 AND .dim2==a.dim1
   end

   is_square result (res) ::: pure
   ! Returns TRUE if the matrix is square
      self :: IN
      res :: BIN
      res = .dim1==.dim2
   end

!  ======
!  Output
!  ======

   dump(object_name,lower_triangle)
   ! Dump a matrix object in text format
      self :: IN
      object_name :: STR, IN
      lower_triangle :: BIN, optional, IN
    
      element :: STR
      lower :: BIN
      i,j :: INT

      lower = FALSE
      if (present(lower_triangle)) lower = lower_triangle

      stdout.flush

      stdout.text(trim(object_name)//":MAT{TYPE} = {")

      stdout.increment_margin_width(1)
      stdout.flush

      stdout.put("dimensions =",width=11)
      stdout.put(.dim1,width=0)
      stdout.put(.dim2,width=0)
      stdout.flush

      if (NOT lower) then

         do i = 1,.dim1
         do j = 1,.dim2
            element = trim(object_name)//"("//trim(i.to_str)//","//trim(j.to_str)//")"
            self(i,j).dump(trim(element))
         end
         end

      else

         do i = 1,.dim1
         do j = 1,i
            element = trim(object_name)//"("//trim(i.to_str)//","//trim(j.to_str)//")"
            self(i,j).dump(trim(element))
         end
         end

      end

      stdout.increment_margin_width(-1)
      stdout.flush

      stdout.text("}")

   end

   dmpp(object_name,lower_triangle)
   ! Dump a matrix pointer object in text format
      self :: allocatable, INOUT
      object_name :: STR, IN
      lower_triangle :: BIN, optional, IN
    
      element :: STR
      lower :: BIN
      i,j :: INT

      stdout.flush

      if (.destroyed) then

         stdout.text(trim(object_name)//":MAT{TYPE}* = null")

      else

         lower = FALSE
         if (present(lower_triangle)) lower = lower_triangle

         stdout.text(trim(object_name)//":MAT{TYPE} = {")

         stdout.increment_margin_width(1)
         stdout.flush

         stdout.put("dimensions =",width=11)
         stdout.put(.dim1,width=0)
         stdout.put(.dim2,width=0)
         stdout.flush

         if (NOT lower) then
       
            do i = 1,.dim1
            do j = 1,.dim2
               element = trim(object_name)//"("//trim(i.to_str)//","//trim(j.to_str)//")"
               self(i,j).dump(trim(element))
            end
            end
       
         else
       
            do i = 1,.dim1
            do j = 1,i
             stdout.flush
               element = trim(object_name)//"("//trim(i.to_str)//","//trim(j.to_str)//")"
               self(i,j).dump(trim(element))
            end
            end
       
         end

         stdout.increment_margin_width(-1)
         stdout.flush

         stdout.text("}")

      end

   end

end
