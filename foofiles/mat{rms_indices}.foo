!-------------------------------------------------------------------------------
!
! MAT{RMS_INDICES}
!
! This object is used to store precalculated information pertaining to the
! reduced multiplication scheme (RMS) used in electron repulsion integral 
! evaluation. 
!
! Copyright (C) Dylan Jayatilaka, 2006
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: mat{rms_indices}.foo 4338 2014-04-30 03:23:21Z dylan_ $
!-------------------------------------------------------------------------------

module MAT{RMS_INDICES}

   implicit none

contains

!  =================
!  Memory allocation
!  =================

   create(dim1,dim2) ::: get_from(MAT{OBJECT}), leaky, PURE
   ! Allocate a matrix with the given dimensions
   end

   create(lb1,ub1,lb2,ub2) ::: get_from(MAT{OBJECT}), leaky, PURE
   ! Allocate a matrix with the given bounds
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

! ============================
! Size-of and shape operations 
! ============================

   dim1 result (res) ::: get_from(MAT{OBJECT}), inlined_by_foo
   ! Return the size of the 1st dimension
   end

   dim2 result (res) ::: get_from(MAT{OBJECT}), inlined_by_foo
   ! Return the size of the 2nd dimension
   end

! ===========
! Set indices
! ===========

   set_indices(l_max,nx,ny,nz,px,py,pz) ::: leaky, PURE
   ! Set the rms indices. 
      self :: allocatable, OUT
      l_max :: INT, IN
      nx,ny,nz :: VEC{INT}, IN
      px,py,pz :: VEC{INT}, IN

   ENSURE(lbound(self,1)==0,"lower bound 1 wrong")
   ENSURE(lbound(self,2)==0,"lower bound 2 wrong")
   ENSURE(ubound(self,1)==l_max,"upper bound 1 wrong")
   ENSURE(ubound(self,2)==l_max,"upper bound 2 wrong")
   ENSURE(nx.dim== ::n_comp_up_to(2*l_max),"wrong size, nx")
   ENSURE(ny.dim==nx.dim,"wrong size, ny")
   ENSURE(nz.dim==nx.dim,"wrong size, nz")

      lmax,lmin,f,l :: INT

      do lmax = 0,l_max   ! Maximum l for one shell
      do lmin = 0,lmax    ! l for the other shell

         f = ::n_comp_up_to(lmax-1)+1
         l = ::n_comp_up_to(lmin+lmax)

         self(lmax,lmin).set_indices(nx(f:l),ny(f:l),nz(f:l),px(f:l),py(f:l),pz(f:l))

      end
      end

   end

   n_comp_up_to(l) result (res) ::: get_from(GAUSSIAN_DATA), selfless, private, pure
   ! No. of gaussian cartesian component functions up to and including the shell
   ! with momentum "l".
   end

end
