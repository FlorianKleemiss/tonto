module BREAKDOWN_DATA
   implicit none

   num_interaction_directions :: INT = 4
   num_interaction_types :: INT = 5

   contains
   
   create ::: get_from(OBJECT), leaky
   ! Create an object
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   !Add other functions later
   
  get_functional_groups_energy_breakdown
     self :: INOUT
     
     .group_energies.create(.group_pairs.dim1, num_interaction_types, num_interaction_directions)
     .get_functional_groups_energy_breakdown_term(.E_el, 1)
     .get_functional_groups_energy_breakdown_term(.E_pol, 2)
     .get_functional_groups_energy_breakdown_term(.E_disp, 3)
     .get_functional_groups_energy_breakdown_term(.E_er, 4)
     .get_functional_groups_energy_breakdown_term(.E_tot, 5)
  end

  get_functional_groups_energy_breakdown_term(energy, type_num)
     self :: INOUT
     
     energy :: MAT{REAL}*
     type_num :: INT

     i :: INT

     do i = 1, .group_pairs.dim1
        .get_group_pair_energy_breakdown(energy, type_num, i)
     end
  end

   get_group_pair_energy_breakdown(energy, type_num, pair_num)
      self :: INOUT
 
      energy :: MAT{REAL}*, IN
      type_num, pair_num :: INT, IN
      
      group1, group2 :: VEC{INT}*
      gge, gme, mge :: MAT{REAL}*
      gg_term, gb_term, bg_term, bb_term :: REAL

      group1 => .groups(.group_pairs(pair_num, 1))
      group2 => .groups(.group_pairs(pair_num, 2))
      
      gge.create(group1.dim, group2.dim)
      gme.create(group1.dim, energy.dim2)
      mge.create(energy.dim1, group2.dim)

      gge = energy(group1, group2)
      gme = energy(group1, :)
      mge = energy(:, group2)

      gg_term = gge.sum_elements
      gb_term = gme.sum_elements - gg_term
      bg_term = mge.sum_elements - gg_term
      bb_term = energy.sum_elements - gg_term - gb_term - bg_term

      gge.destroy
      gme.destroy
      mge.destroy

      .group_energies(pair_num, type_num, :) = [gg_term, gb_term, bg_term, bb_term]
   end
end
