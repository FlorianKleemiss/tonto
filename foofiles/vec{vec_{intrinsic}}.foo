!---------------------------------------------------------------------------
!
! VEC{VEC_{INTRINSIC}} : an array of elements each of which is 
! a vector of intrinsic elements, possible of different length
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: vec{vec_{intrinsic}}.foo 4376 2014-05-16 18:09:06Z dylan_ $
!---------------------------------------------------------------------------

virtual module VEC{VEC_{INTRINSIC}}

   implicit none

contains

!  =================
!  Memory allocation
!  =================

   create(dim) ::: leaky, PURE
   ! Allocate vector
      self :: allocatable, OUT
      dim :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(dim),stat=status)
      ENSURE(status==0,"error in allocating memory")
#else
      allocate(self(dim))
#endif

   end

   create(dim,dimv) ::: leaky, PURE
   ! Allocate space for a vector (of length "dim") of vectors 
   ! (each of length "dimv").
      self :: allocatable, OUT
      dim,dimv :: INT, IN

#ifdef USE_PRECONDITIONS
      status :: INT
#endif

#ifdef USE_PRECONDITIONS
      allocate(self(dim),stat=status)
      ENSURE(status==0,"error in deallocating memory")
#else
      allocate(self(dim))
#endif

      .create_vec(dimv)

   end

   create_vec(dimv) ::: leaky, PURE
   ! Allocate the sub parts
      self :: INOUT
      dimv :: INT, IN

      i :: INT

      do i = 1,.dim
         self(i).element.create(dimv)
      end

   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

!  ======
!  Sizing
!  ======

   max_element_dim result (res) ::: pure
   ! Return the maximum element dimension
      self :: IN
      res :: INT

      s :: INT

      res = 0

      do s = 1,.dim
         res = max(res,self(s).element.dim)
      end

   end

!  =======================
!  Shrinking and expansion
!  =======================

   shrink(dim) ::: leaky, PURE
   ! Shrinks self to dimension "dim". Contents are retained.
      self :: allocatable, INOUT
      dim :: INT, IN

   ENSURE(ubound(self,1)>dim,"dim is too small")
   ENSURE(lbound(self,1)==1,"self must have lbound 1")

      self = [ self(1:dim) ]

   end

   expand(dim) ::: leaky, PURE
   ! Expands self to dimension "dim". Contents are retained.
   ! New elements which are added are unallocated
      self :: allocatable, INOUT
      dim :: INT, IN

      old :: VEC{VEC_{INTRINSIC}}@

      if (.destroyed) then

         .create(dim)

      else if (.dim==0) then

         .destroy
         .create(dim)

      else

         ENSURE(ubound(self,1)<dim,"dim is too small")
         ENSURE(lbound(self,1)==1,"self must have lbound 1")

         old = self

         .destroy
         .create(dim)
         
         self(1:old.dim) = old

      end

   end

   append(v) ::: leaky, PURE
   ! Expands self to the required dimension, and append the contents
   ! of encapsulated vector "v". 
      self :: allocatable, INOUT
      v :: VEC{VEC_{INTRINSIC}}, IN

      if (.destroyed) then
         self = v
      else
         self = [ self, v ]
      end

   end

   append(value) ::: leaky, PURE
   ! Expands self to the required dimension, and append the single
   ! "value" onto the end of self.
      self :: allocatable, INOUT
      value :: VEC{INTRINSIC}, IN

      val :: VEC_{INTRINSIC}

      val.element = [ value ]

      if (.destroyed) then
         self = [ val ]
      else
         self = [ self, val ]
      end

   end

   append_listed_to(res,list) ::: leaky, PURE
   ! Append together (i.e. concatenate) the vectors in self whose
   ! indices are listed in "list".
      self :: IN
      list :: VEC{INT}, IN
      res :: VEC{INTRINSIC}@, OUT

   ENSURE(list.dim>=1,"list must not have zero dimension")
   ENSURE(maxval(list)<=.dim,"some elements of list are too large")
   ENSURE(minval(list)>=1,"list elements must be +ve")

      i :: INT

      res = [ (self(list(i)).element, i=1,list.dim) ]

   end

end

