!---------------------------------------------------------------------
!
! ATOM_GROUP:
!
! For storing the lists of integers which make up separate atom groups
! within a list of atoms.
!
! Copyright (C) Dylan Jayatilaka, June 2011
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: atom_group.foo $
!
!---------------------------------------------------------------------

module ATOM_GROUP

   implicit none

   keys :: VEC{STR}*, private DEFAULT_NULL

contains

   create ::: get_from(OBJECT), leaky
   ! Create an object
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object
   end

   nullify_ptr_part
   ! Nullify the pointer parts
      nullify(.atom_index)
      nullify(.atom)
      nullify(.mol)
   end

   destroy_ptr_part ::: leaky
   ! Destroy the pointer parts
      .atom_index.destroy
      nullify(.atom) ! do not destroy
      ! .mol.destroy ! destroy manually
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   create_copy(object) ::: get_from(OBJECT), leaky
   ! Create a copy of object
   end

   copy(atom_group) ::: leaky
   ! Set self to be "group".
      atom_group :: ATOM_GROUP, IN
      self = atom_group
      .nullify_ptr_part
      if (atom_group.atom_index.created) .atom_index.create_copy(atom_group.atom_index)
   end

!  ===========
!  Set methods
!  ===========

   set_defaults
   ! Set up defaults

      .name            = " "
      .n_atoms         = 0
      .charge          = 0
      .MO_file_name    = " "
      .fchk_file_name  = " "
      .rotation_matrix = ZERO
      .shift           = ZERO
      .n_MOs           = 0

   end

   set_one_group
   ! Set up one group comprising all the atoms
   DIE_IF(.atom.destroyed,"atom list not created")
      i :: INT
      .atom_index.destroy
      .atom_index.create(.atom.dim)
      .atom_index = [ (i, i=1,.atom.dim) ]
   end

   set_atom(atom)
   ! Set the .atom list to which .atom_index refers to
      atom :: VEC{ATOM}*
   ENSURE(atom.created,"atom list not created")
      .atom => atom
   end

   set_mol(mol)
   ! Set the molecule associated with .atom_index
      mol :: MOLECULE*
   ENSURE(mol.created,"mol not created")
      .mol => mol
   end

   set_name(name)
   ! Set the name of this stom group to be "name"
      name :: STR
      .name = name
   end

!  ============
!  Read methods
!  ============

   read_keywords ::: get_from(OBJECT), recursive, leaky
   ! Read data from "stdin" using keyword style input.
   end

   process_keyword(keyword) ::: leaky
   ! Process command "keyword". Any required data needed by the "keyword" is
   ! inputted from "stdin".
      keyword :: STR

      word :: STR

      word = keyword
      word.to_lower_case

      select case (word)
         case ("}                      ")  ! exit read_loop
         case ("atom_indices=          "); .read_atom_indices
         case ("charge=                "); .read_charge
         case ("fchk_file=             "); .read_fchk_file_name
         case ("fchk_file_name=        "); .read_fchk_file_name
         case ("mo_file_name=          "); .read_MO_file_name
         case ("n_mos=                 "); .read_n_MOs
         case ("name=                  "); .read_name
         case ("rotation=              "); .read_rotation
         case ("shift=                 "); .read_shift
         case default;       UNKNOWN(word)
      end

   end

   read_atom_indices ::: leaky
   ! Read the atom atom_indices in the group
      stdin.read_ptr(.atom_index)
      .n_atoms = .atom_index.dim
   end

   read_charge ::: leaky
   ! Read the charges on the group
      stdin.read(.charge)
   end

   read_fchk_file_name ::: leaky
   ! Read the name of gaussian FChk file for group
      stdin.read(.fchk_file_name)
   end

   read_MO_file_name ::: leaky
   ! Read the name of tonto MO file for group
      stdin.read(.MO_file_name)
   end

   read_rotation ::: leaky
   ! Read a 3x3 rotation matrix
      stdin.read(.rotation_matrix)
   end

   read_shift ::: leaky
   ! Read shift vector
       shift :: VEC{REAL}(3)
       stdin.read(shift)
       .shift = shift * BOHR_PER_ANGSTROM
   end

   read_n_MOs ::: leaky
   ! Read the number of MOs to use to make the density matrix on 
   ! each group
      stdin.read(.n_MOs)
   end

   read_name ::: leaky
   ! Read the name for the groups
      stdin.read(.name)
   end

   finalize(atom) ::: leaky
   ! Do all the sanity checks and default settings
      atom :: VEC{ATOM}*

      DIE_IF(atom.destroyed,"no atom list")
      DIE_IF(atom.dim==0,"no atoms")

      ! Set the atom information
      .set_atom(atom)

      ! Ensure .atom_index is defined and OK
      DIE_IF(.atom_index.destroyed,"no atom_index in the group")
      DIE_IF(.atom_index.dim>.atom.dim,"more atom_index than # of atoms!")
      DIE_IF(.atom_index.has_repetitions,"there are repeated atom_index!")
      DIE_IF(any(.atom_index<=0),"non-positive atom atom_index!")
      DIE_IF(any(.atom_index>.atom.dim),"index too large")

   end

!  ====================
!  Key related routines
!  ====================

   read_keys ::: get_from(OBJECT), leaky
   ! Read the "keys".
   end

   process_keys ::: get_from(OBJECT), leaky
   ! Process each of the words in the "keys" list.
   ENSURE(keys.created,"no keys")
   end

   keys_created result (res) ::: get_from(OBJECT)
   ! Return TRUE if the list-element keys are created.
   end

   set_keys(the_keys) ::: get_from(OBJECT)
   ! This is for setting the "keys" externally.
   end

   clear_keys ::: get_from(OBJECT), leaky
   ! This is for destroying the "keys" externally.
   end

end
