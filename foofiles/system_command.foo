!---------------------------------------------------------------------------
!
! SYSTEM_COMMAND: Object executing shel commands.
!
! Copyright (C) Dylan Jayatilaka, 2014
!
! ===
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
!---------------------------------------------------------------------------

module SYSTEM_COMMAND

   implicit none

contains

! =================
! Memory allocation
! =================

   create ::: get_from(OBJECT), leaky
   ! Create an object. This version does not nullify point parts.
   end

   destroy ::: get_from(OBJECT), leaky
   ! Destroy an object. This version does not destroy pointer parts.
   end

   created result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has been created
      self :: PTR
      res :: BIN
   end

   destroyed result (res) ::: get_from(OBJECT), inlined_by_foo
   ! Returns true if self has *not* been created
      self :: PTR
      res :: BIN
   end

   create_copy(object) ::: get_from(OBJECT)
   ! Create a copy of object
   end

   copy(object) ::: leaky
   ! Copy the "object"
      object :: SYSTEM_COMMAND

      self = object

   end

! ===========
! Set methods
! ===========

   set_defaults
   ! Set up the default settings

      .command     = " "
      .wait        = TRUE
      .exit_status = 0
      .status      = 0
      .message     = " "

   end

   set_command(val)
   ! Set up the default settings
      val :: STR, IN

   ENSURE(val/=" ","empty command!")

      .command = val

   end

   set_asynchorous
   ! Set the command to execute asynchronouly i.e. wait=FALSE
      .wait = FALSE
   end

! ===================
! Execute the command
! ===================

   execute_command
   ! Do it ...
   ENSURE(.command/=" ","empty command!")
      call execute_command_line(.command,.wait,.exit_status,.status,.message)
   end

! ===
! Put
! ===

   put
   ! Put out the command line info

      stdout.flush
      stdout.text("======================")
      stdout.text("Execute system command")
      stdout.text("======================")

      stdout.flush
      stdout.show("Command (program) name       =",.command)
      stdout.show("Asynchronous?                =",.wait)
      stdout.show("Exit status (sys. dependent) =",.exit_status)
      stdout.show("Exit command status          =",.status)
      stdout.show("Exit command message         =",.message)

   end

end
