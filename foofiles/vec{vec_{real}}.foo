!---------------------------------------------------------------------------
!
!  VEC{VEC_{REAL}} : a matrix where each column is a different length
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: vec{vec_{real}}.foo 4047 2013-06-10 08:24:35Z dylan_ $
!---------------------------------------------------------------------------

module VEC{VEC_{REAL}}

   implicit none

contains

!  =================
!  Memory allocation
!  =================

   create(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate vector
   end

   create(dim,dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate space for a vector (of length "dim") of vectors 
   ! (each of length "dimv").
   end

   create_vec(dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate the sub parts
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

!  ======
!  Sizing
!  ======

   max_element_dim result (res) ::: get_from(VEC{VEC_{INTRINSIC}}), pure
   ! Return the maximum element dimension
   end

!  =======================
!  Shrinking and expansion
!  =======================

   shrink(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Shrinks self to dimension "dim". Contents are retained.
   end

   expand(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Expands self to dimension "dim". Contents are retained.
   ! New elements which are added are unallocated
   end

   append(v) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Expands self to the required dimension, and append the contents
   ! of encapsulated vector "v". 
   end

   append(value) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Expands self to the required dimension, and append the single
   ! "value" onto the end of self.
   end

   append_listed_to(res,list) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Append together (i.e. concatenate) the vectors in self whose
   ! indices are listed in "list".
   end


   unflatten(vec_mat) ::: PURE
   ! Unflatten the vectors of a vector of vectors into matrices
   ! meant for singlet contraction_wfs at present
     self :: IN
     vec_mat :: VEC{MAT_{REAL}}, OUT

     n,o,p,dim1,dim :: INT
     counter :: INT

     dim  = self(1).element.dim
     dim1 = int(dsqrt(2*dim+0.25d0)-0.5d0)

     do n = 1,.dim

        counter = 0
        do o = 1, dim1
          counter = counter + 1
          vec_mat(n).element(o,o) = self(n).element(counter)
        end
       
        do o = 1, dim1
        do p = 1,o-1
           counter = counter + 1
           vec_mat(n).element(o,p) = self(n).element(counter)
           vec_mat(n).element(p,o) = self(n).element(counter)
        end
        end

     end

   end

!  =============
!  Miscellaneous
!  =============

   schmidt_orthonormalise(S,scales,n_dependent)
   ! Schmidt orthonormalise the vectors in "self" using "S" as the
   ! metric. "scales" is set to the
   ! normalisation factors used to normalise each column after the Schmidt
   ! procedure. Only those vectors with norm more than the linear dependence
   ! tolerance are orthonormalised. the others are counted (n_dependent) 
   ! and normalised if the norm is not initially below a certain threshold. 
     self :: target
     S :: MAT{REAL}, IN 
     scales :: VEC{REAL}, OUT
     n_dependent :: INT, OUT

   ENSURE(NOT S.is_zero,"S is zero matrix")

     old,new :: VEC{REAL}@
     keep :: VEC{REAL}@
     skip :: VEC{BIN}@
     fac :: REAL
     tol :: REAL
     n,o,dim :: INT
     norm :: REAL

     tol = sqrt(MAT_LINEAR_DEPENDENCE_TOL)

     n_dependent = 0
     dim = self(1).element.dim

     keep.create(dim)
     skip.create(1,.dim)
     skip = FALSE

     ! Eliminate function with small norms
     do n = 1,.dim
       new => self(n).element
       norm = S.dot(new,new)
       if(norm < sqrt(tol)) then
         n_dependent=n_dependent+1
         skip(n)=TRUE
         scales(n)=norm
       end
     end

     do n = 1,.dim

        if(skip(n)) cycle

        new => self(n).element
        keep = new
        norm = S.dot(new,new)

        ! Orthogonalisation
        do o = 1,n-1
           if(skip(o)) cycle
           old => self(o).element
           fac = S.dot(old,new)
           new = new - fac*old
           norm = norm - fac*fac
        end
        scales(n) = norm

        ! Normalisation of the orthogonalised vector
        if(norm>tol) then
          norm = sqrt(norm)
          new = new/norm
        else
          n_dependent=n_dependent+1
          new=keep
          skip(n) = TRUE
        end

     end

     ! Clean
     nullify(new)
     nullify(old)
     keep.destroy
     skip.destroy

   end

end
