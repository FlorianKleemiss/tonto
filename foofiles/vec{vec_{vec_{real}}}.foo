!---------------------------------------------------------------------------
!
!  VEC{VEC_{VEC_{REAL}}} : 
!
!  A list of list of list of rweal numbers.
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: vec{vec_{vec_{real}}}.foo 3505 2011-06-26 18:16:54Z dylan_ $
!---------------------------------------------------------------------------

module VEC{VEC_{VEC_{REAL}}}

   implicit none

contains

!  =================
!  Memory allocation
!  =================

   create(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate vector
   end

   create(dim,dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate space for a vector (of length "dim") of vectors 
   ! (each of length "dimv").
   end

   create_vec(dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate the sub parts
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{OBJECT}), inlined_by_foo, pure
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{OBJECT}), inlined_by_foo, pure
   ! Return the size of the 1st dimension
   end

!  ======
!  Sizing
!  ======

   max_element_dim result (res) ::: get_from(VEC{VEC_{INTRINSIC}})
   ! Return the maximum element dimension
   end

end
