!---------------------------------------------------------------------------
!
!  VEC{ATOM_GROUP}: a vector of ATOM_GROUPS
!
! Copyright (C) Dylan Jayatilaka, 2011
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: $
!---------------------------------------------------------------------------

module VEC{ATOM_GROUP}

   implicit none

contains

!  ==================
!  Allocation methods
!  ==================

   create(dim) ::: get_from(VEC{OBJECT}), leaky, PURE
   ! Allocate vector
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{OBJECT}), inlined_by_foo, pure
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{OBJECT}), inlined_by_foo, pure
   ! Return the size of the 1st dimension
   end

!  ===========
!  Set methods
!  ===========

   set_defaults ::: get_from(VEC{OBJECT})
   ! Set default values
   end

   update(atom) ::: leaky
   ! Do all the sanity checks and default settings
      atom :: VEC{ATOM}@

      g :: INT

      ! Finalize checks on each group
      do g = 1,.dim
         self(g).update(atom)
         if (self(g).name==" ") self(g).set_name("group_"//trim(g.to_str))
      end

   end

!  ====================
!  Non-list based input
!  ====================

   read_keywords ::: get_from(VEC{OBJECT}), leaky
   ! Read and process normal (non list-type) keywords from "stdin";
   ! "self" allocatable here.
   end

   process_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! Process a normal (non list-type) "keyword".
   end

!  ================
!  List-based input
!  ================

   read_list_keywords ::: get_from(VEC{OBJECT}), recursive, leaky
   ! Read and process list-data keywords from "stdin". List-based
   ! keywords are those that apply to each individual element of the
   ! list through a list of "keys" stored in the host module.
   ! NOTE: this routine will create the list, if required.
   ! NOTE: "self" allocatable here.
   end

   process_list_keyword(keyword) ::: get_from(VEC{OBJECT}), leaky
   ! Process a list-data "keyword", common to all list-type objects.
   ! "self" is allocatable here.
   end

   process_keys ::: get_from(VEC{OBJECT}), leaky
   ! Process the keywords in the "keys" OBJECT module variable on each
   ! element in the list "self".  "self" is allocatable here.
   end

   read_keys ::: get_from(VEC{OBJECT}), leaky
   ! Read a new set of keys
   end

   set_keys(the_keys) ::: get_from(VEC{OBJECT}), leaky
   ! This is for setting the "keys" externally.
   end

   read_data ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process the keywords in the "keys" module variable
   ! on each element of the lista-data "self". Opening and closing
   ! braces are needed.
   end

   read_data_sans_braces ::: get_from(VEC{OBJECT}), leaky
   ! Repeatedly process the items in the "keys" OBJECT module variable
   ! to read in the list-data.  Opening and closing braces *not*
   ! needed.  "self" is allocatable here.
   end

   data_length result (length) ::: get_from(VEC{OBJECT}), selfless, private
   ! Read ahead in "stdin" to get the "length" of the list-data.  The
   ! data must begin with the first data item, *not* a "{" symbol but
   ! must be terminated by a "}" symbol.  The order of data items
   ! comprising the list-data is given by the "keys" OBJECT module
   ! variable.  The data list must be terminated by a "}".
   end

!  =======
!  Enquiry
!  =======

   has_fchk_files result (res) ::: pure
   ! True if all the fchk files are defined
      self :: IN
      res :: BIN
      res = all(self.fchk_file_name /= " ")
   end

   has_MO_files result (res) ::: pure
   ! True if all the MO files are defined
      self :: IN
      res :: BIN
      res = all(self.MO_file_name /= " ")
   end

   has_atom_indices result (res)
   ! True if all the fchk files are defined
      self :: IN
      res :: BIN

      g :: INT

      res = FALSE

      do g = 1,.dim
         res = self(g).atom_index.created
         if (NOT res) exit
      end

   end

!  ======
!  Output
!  ======

   put
   ! Output the atom group table

      nm :: VEC{STR}@
      qq :: VEC{REAL}@
      na :: VEC{INT}@
      at :: VEC{VEC_{INT}}@
      g  :: INT
      table :: VEC{TABLE_COLUMN}@

      stdout.flush
      stdout.flush
      stdout.text("===========")
      stdout.text("Atom groups")
      stdout.text("===========")
      stdout.flush
      stdout.text("Atom groups are used to define submolecules on which")
      stdout.text("calculations can be made and analyzed and combined  ")
      stdout.text("back into the parent supermolecule.")
      stdout.flush
      stdout.show("No. of atom groups =",.dim)
      stdout.flush

      ! Data
      nm.create(.dim); nm = .name
      qq.create(.dim); qq = .charge
      na.create(.dim); na = .n_atoms
      at.create(.dim)
      do g = 1,.dim
         at(g).element = self(g).atom_index
      end

      ! Table
      table.create(4)
      table(1).set_heading("Group");  table(1).set_values(nm)
      table(1).set_subhead("name")
      table(2).set_real_precision(2)
      table(2).set_heading("Charge"); table(2).set_values(qq)
      table(3).set_heading("No of");  table(3).set_values(na)
      table(3).set_subhead("atoms")
      table(4).set_heading("Atom");   table(4).set_values(at)
      table(4).set_subhead("list")
      table.put(label_rows=TRUE)

      ! Clean
      table.destroy
      at.destroy
      na.destroy
      qq.destroy
      nm.destroy

   end

end
