!---------------------------------------------------------------------------
!
!  VEC{VEC_{STR}} : a matrix where each column is (possibly) a different length
!
! Copyright (C) Daniel Grimwood, 1998
!
! This library is free software; you can redistribute it and/or
! modify it under the terms of the GNU Library General Public
! License as published by the Free Software Foundation; either
! version 2 of the License, or (at your option) any later version.
!
! This library is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
! Library General Public License for more details.
!
! You should have received a copy of the GNU Library General Public
! License along with this library; if not, write to the
! Free Software Foundation, Inc., 59 Temple Place - Suite 330,
! Boston, MA  02111-1307, USA.
!
! $Id: vec{vec_{str}}.foo $
!---------------------------------------------------------------------------

module VEC{VEC_{STR}}

   implicit none

contains

!  =================
!  Memory allocation
!  =================

   create(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate vector
   end

   create(dim,dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate space for a vector (of length "dim") of vectors 
   ! (each of length "dimv").
   end

   create_vec(dimv) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Allocate the sub parts
   end

   destroy ::: get_from(OBJECT), leaky, PURE
   ! Deallocate "self"
   end

   created result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has been allocated
   end

   destroyed result (res) ::: get_from(OBJECT), pure
   ! Returns true if self has *not* been allocated
   end

!  ==================
!  Size-of operations
!  ==================

   size result (res) ::: get_from(VEC{OBJECT}), inlined_by_foo, pure
   ! Return the size of the array
   end

   dim result (res) ::: get_from(VEC{OBJECT}), inlined_by_foo, pure
   ! Return the size of the 1st dimension
   end

!  ======
!  Sizing
!  ======

   max_element_dim result (res) ::: get_from(VEC{VEC_{INTRINSIC}}), pure
   ! Return the maximum element dimension
   end

!  =======================
!  Shrinking and expansion
!  =======================

   shrink(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Shrinks self to dimension "dim". Contents are retained.
   end

   expand(dim) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Expands self to dimension "dim". Contents are retained.
   ! New elements which are added are unallocated
   end

   append(v) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Expands self to the required dimension, and append the contents
   ! of encapsulated vector "v". 
   end

   append(value) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Expands self to the required dimension, and append the single
   ! "value" onto the end of self.
   end

   append_listed_to(res,list) ::: get_from(VEC{VEC_{INTRINSIC}}), leaky, PURE
   ! Append together (i.e. concatenate) the vectors in self whose
   ! indices are listed in "list".
   end

   
   item_str_length result (res) ::: pure
   ! Returns the max string length (not including spaces) over all
   ! elements.  
      self :: IN
      res :: INT 

      i,j :: INT

      ! Get the maximum element width
      res = 0
      do i = 1,.dim
      do j = 1,self(i).element.dim
         res = max(res,self(i).element(j).str_length)
      end
      end

   end 
   
   list_str_length(spaces) result (res) ::: pure
   ! Returns the max of the concatenated list lengths
      self :: IN
      spaces :: INT, optional, IN
      res :: INT 

      wid :: INT

      wid = .item_str_length
      if (present(spaces)) wid = wid + spaces

      res = wid * .max_element_dim

   end 

end
